/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ (() => {

eval("// LOOK AT MAKING THE DATA OBJECT SEPARATE WITH ITS OWN LOAD CITY FUNCT - then you can just pass it into each individual funct\n\n// Creating 1 global variable here for the current location's data that can be used when needing to flip between F/C temps\nlet data = undefined; \n\n// This runs to automatically fill out the page with the weather for Austin, TX\nasync function loadDefault() {\n    try {\n        const response = await fetch(\n            \"https://api.weatherapi.com/v1/current.json?key=8f6804f1b072413ca08204636231807&q=austin\",\n            { mode: \"cors\" }\n        );\n        data = await response.json();\n        // Uses the fetched data to build the page details\n        loadHeader(data);\n        loadBodyF(data);\n        //Sets event listener to the search button to run the loadlocation function - only needed on initial load\n        const searchBtn = document.getElementById(\"search-btn\");\n        searchBtn.addEventListener(\"click\", loadLocation);\n\n        // Adds a listener to the input element for the search text field listening for the enter key\n        const searchBar = document.getElementById(\"search-bar\");\n        searchBar.addEventListener(\"keyup\", function (event) {\n            if (event.code === \"Enter\") { \n                loadLocation();\n            }\n        });\n\n        //creates a listener on the checkbox element that toggles between F and C temps\n        const tempToggle = document.getElementById(\"temp-toggle\");\n        tempToggle.addEventListener(\"click\",changeTempFormat);\n    } catch (err) {\n        alert(err);\n    }\n}\n\n\nasync function loadLocation() {\n    const searchText = document.getElementById(\"search-bar\").value;\n    try {\n        const response = await fetch(\n            \"https://api.weatherapi.com/v1/current.json?key=8f6804f1b072413ca08204636231807&q=\" +\n            searchText,\n            { mode: \"cors\" }\n        );\n        data = await response.json();\n        clearData();\n        // Uses the fetched data to build the page details\n        loadHeader(data);\n        loadBodyF(data);\n    } catch (err) {\n        alert(err.error.message);\n    }\n}\n\n// Displays the city name at the top of the box\nasync function loadHeader(data) {\n    const headerCity = document.getElementById(\"city\");\n    headerCity.innerHTML = `${data.location.name}, ${data.location.region}`;\n}\n\n// Builds the body of fahrenheit temps with the fetched data\nasync function loadBodyF(data) {\n    const bodyContent = document.getElementById(\"body-content\");\n\n    const weatherIcon = document.createElement(\"img\");\n    weatherIcon.alt = \"current weather icon\";\n    weatherIcon.className = \"weather-icon\";\n    let weatherIconUrl = data.current.condition.icon;\n    weatherIcon.src = \"https:\" + weatherIconUrl;\n\n    const actualTemp = document.createElement(\"p\");\n    actualTemp.innerHTML = `${data.current.temp_f}째F`;\n    actualTemp.className = \"actual-temp\";\n    actualTemp.id = \"actual-temp\";\n\n    const feelsTemp = document.createElement(\"p\");\n    feelsTemp.innerHTML = `Feels like  ${data.current.feelslike_f}째F`;\n    feelsTemp.className = \"feels-temp\";\n    feelsTemp.id = \"feels-temp\";\n\n    const humidity = document.createElement(\"p\");\n    humidity.innerHTML = `Humidity is ${data.current.humidity}%`;\n    humidity.className = \"humidity\";\n    humidity.id = \"humiditiy\";\n\n    const condition = document.createElement(\"p\");\n    condition.innerText = `Current conditions - ${data.current.condition.text}`;\n    condition.className = \"condition\";\n    condition.id = \"condition\";\n\n    bodyContent.appendChild(weatherIcon);\n    bodyContent.appendChild(actualTemp);\n    bodyContent.appendChild(feelsTemp);\n    bodyContent.appendChild(humidity);\n    bodyContent.appendChild(condition);\n}\n\n// Builds the body of celsius temps with the fetched data\nasync function loadBodyC(data) {\n    const bodyContent = document.getElementById(\"body-content\");\n\n    const weatherIcon = document.createElement(\"img\");\n    weatherIcon.alt = \"current weather icon\";\n    weatherIcon.className = \"weather-icon\";\n    let weatherIconUrl = data.current.condition.icon;\n    weatherIcon.src = \"https:\" + weatherIconUrl;\n\n    const actualTemp = document.createElement(\"p\");\n    actualTemp.innerHTML = `${data.current.temp_c}째C`;\n    actualTemp.className = \"actual-temp\";\n    actualTemp.id = \"actual-temp\";\n\n    const feelsTemp = document.createElement(\"p\");\n    feelsTemp.innerHTML = `Feels like  ${data.current.feelslike_c}째C`;\n    feelsTemp.className = \"feels-temp\";\n    feelsTemp.id = \"feels-temp\";\n\n    const humidity = document.createElement(\"p\");\n    humidity.innerHTML = `Humidity is ${data.current.humidity}%`;\n    humidity.className = \"humidity\";\n    humidity.id = \"humiditiy\";\n\n    const condition = document.createElement(\"p\");\n    condition.innerText = `Current conditions - ${data.current.condition.text}`;\n    condition.className = \"condition\";\n    condition.id = \"condition\";\n\n    bodyContent.appendChild(weatherIcon);\n    bodyContent.appendChild(actualTemp);\n    bodyContent.appendChild(feelsTemp);\n    bodyContent.appendChild(humidity);\n    bodyContent.appendChild(condition);\n}\n\nfunction clearData() {\n    const headerData = document.getElementById(\"city\");\n    const bodyData = document.getElementById(\"body-content\");\n\n    headerData.innerHTML = \"\";\n    bodyData.innerHTML = \"\";\n}\n\nfunction clearBody() {\n    const bodyData = document.getElementById(\"body-content\");\n    bodyData.innerHTML = \"\";\n}\n\n\nfunction changeTempFormat() {\n    const tempToggle = document.getElementById(\"temp-toggle\");\n    if (tempToggle.checked === true) {\n        clearBody();\n        loadBodyC(data);\n    } else {\n        clearBody();\n        loadBodyF(data);\n    }\n}\n\nloadDefault();\n\n\n//# sourceURL=webpack://tor-weather/./src/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/script.js"]();
/******/ 	
/******/ })()
;